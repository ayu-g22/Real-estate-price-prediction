# -*- coding: utf-8 -*-
"""ProjectRealEstate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UWGHB3u9RwliELaFG_-uZcqAZG3QlyCv
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

df =pd.read_csv('/content/Bengaluru_House_Data.csv')
df

df.groupby('area_type')['area_type'].count()

df2 = df.drop(['area_type','society','availability','balcony'],axis='columns')

df2.isna().sum()

df2=df2.dropna()

df2.isna().sum()

df2.shape

df2['size'].unique()

df2['BHK'] = df2['size'].apply(lambda x : int(x.split(' ')[0]))

df2

df2.drop('size',axis='columns',inplace=True)

df2

df2['BHK'].unique()

df2[df2.BHK>15]

df2.total_sqft.unique()

def is_float(x):
  try:
    float(x)
  except:
    return False
  return True

df2[~df2['total_sqft'].apply(is_float)]

def convert_to_float(x):
  token =x.split('-')
  if token == 2 :
    return (float(token[0])+float(token[1]))/2
  try:
    return float(x)
  except:
    return None

dfTemp = df2.copy()
df2['total_sqft'] =df2['total_sqft'].apply(convert_to_float)

df2['total_sqft'].unique()

df2['total_sqft'].unique()

df2=df2[df2['total_sqft'].notna()]
df2[400:420]

dfTemp[400:420]

df2.loc[423]

dfTemp = df2

df2['price_per_sqft']= (df2['price']*100000)/df2['total_sqft']
df2

len(df2.location.unique())

loc_stats = df2.groupby('location')['location'].agg('count').sort_values(ascending=False)
loc_stats

loc_stats10= loc_stats[loc_stats<=10]

df2.location =df2.location.apply(lambda x: 'others' if x in loc_stats10 else x)
df2

len(df2.location.unique())

dfTemp=df2
df2=df2[~(df2.total_sqft/df2.BHK<300)]
df2

df2.price_per_sqft.describe()

def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('location'):
        m = np.mean(subdf.price_per_sqft)
        st = np.std(subdf.price_per_sqft)
        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out
df3=remove_pps_outliers(df2)
df3

import matplotlib

def plot_scatter_chart(df,location):
  bhk2 = df[(df.location==location) & (df.BHK==2)]
  bhk3= df[(df.location==location) & (df.BHK==3)]
  matplotlib.rcParams['figure.figsize']= (15,10)
  plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)
  plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)
  plt.xlabel("Total Square Feet Area")
  plt.ylabel("Price (Lakh Indian Rupees)")
  plt.title(location)
  plt.legend()
plot_scatter_chart(df3,"Rajaji Nagar")

plot_scatter_chart(df3,"Hebbal")

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('location'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('BHK'):
            bhk_stats[bhk] = {
                'mean': np.mean(bhk_df.price_per_sqft),
                'std': np.std(bhk_df.price_per_sqft),
                'count': bhk_df.shape[0]
            }
        for bhk, bhk_df in location_df.groupby('BHK'):
            stats = bhk_stats.get(bhk-1)
            if stats and stats['count']>5:
                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices,axis='index')
df4= remove_bhk_outliers(df3)
df4

df4.bath.unique()

plt.hist(df4.bath,rwidth=0.8)
plt.xlabel("Number of bathrooms")
plt.ylabel("Count")

df4[df4.bath>10]

df4[df4.bath>df4.BHK+2]

df5 = df4[df4.bath<df4.BHK+2]
df5.shape

df5 =df5.drop(['price_per_sqft'],axis='columns')

dummies = pd.get_dummies(df5.location)

df6 = pd.concat([df5,dummies],axis='columns')
df6.head()

df6=df6.drop('others',axis='columns')

df6

x = df6.drop('price',axis='columns')
x.head()

y = df6.price
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=10)

from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.model_selection import ShuffleSplit
from sklearn.tree import DecisionTreeRegressor

def find_best_model_using_gridsearchcv(X,y):
    algos = {
        'linear_regression' : {
            'model': LinearRegression(),
            'params': {
                'normalize': [True, False]
            }
        },
        'lasso': {
            'model': Lasso(),
            'params': {
                'alpha': [1,2],
                'selection': ['random', 'cyclic']
            }
        },
        'decision_tree': {
            'model': DecisionTreeRegressor(),
            'params': {
                'criterion' : ['mse','friedman_mse'],
                'splitter': ['best','random']
            }
        }
    }
    scores = []
    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
    for algo_name, config in algos.items():
        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)
        gs.fit(x,y)
        scores.append({
            'model': algo_name,
            'best_score': gs.best_score_,
            'best_params': gs.best_params_
        })

    return pd.DataFrame(scores,columns=['model','best_score','best_params'])

find_best_model_using_gridsearchcv(x,y)

from sklearn.linear_model import LinearRegression
lr_clf = LinearRegression()
lr_clf.fit(x_train,y_train)
lr_clf.score(x_test,y_test)

def predict_price(location,sqft,bath,bhk):    
    loc_index = np.where(x.columns==location)[0][0]

    xT = np.zeros(len(x.columns))
    xT[0] = sqft
    xT[1] = bath
    xT[2] = bhk
    if loc_index >= 0:
        xT[loc_index] = 1

    return lr_clf.predict([xT])[0]

predict_price('1st Phase JP Nagar',1000, 3, 3)

predict_price('Indira Nagar',1000, 3, 3)

import pickle
with open('banglore_home_prices_model.pickle','wb') as f:
    pickle.dump(lr_clf,f)